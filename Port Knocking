import argparse
import subprocess
import ipaddress
from concurrent.futures import ThreadPoolExecutor
from colorama import Fore, Style

def solicitar_ips():
    ip_input = input("Digite o endereço IP ou faixa de IP (ex: 172.16.1.0/24): ")
    return ip_input

def solicitar_portas():
    porta_input = input("Digite as portas para testar (separadas por espaço): ")
    portas = [int(porta) for porta in porta_input.split()]
    return portas

def solicitar_porta_knock():
    porta_knock = int(input("Digite a porta de knock a ser verificada: "))
    return porta_knock

def ping_portas(ip, portas):
    for porta in portas:
        with subprocess.Popen(["hping3", "-S", "-c", "1", "-p", str(porta), str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) as process:
            process.communicate()

def verificar_porta_knock(ip, porta_knock):
    resultado_knock = subprocess.run(["wget", f"{str(ip)}:{porta_knock}", "-O", "/dev/null"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    if resultado_knock.returncode == 0:
        print(f"{ip} Porta {porta_knock} " + Fore.GREEN + "Aberta" + Style.RESET_ALL)
    else:
        print(f"{ip} Porta {porta_knock} Não Aberta")

def realizar_ping(faixa_ip, portas, porta_knock):
    ip_list = ipaddress.IPv4Network(faixa_ip, strict=False)
    with ThreadPoolExecutor(max_workers=10) as executor:
        for ip in ip_list.hosts():
            print(f"{ip} ping nas portas {portas} porta Knock {porta_knock} ", end="")
            executor.submit(ping_portas, ip, portas)
            executor.submit(verificar_porta_knock, ip, porta_knock)

def main():
    print("Bem-vindo ao script de Port Knocking!")
    faixa_ip = solicitar_ips()
    portas = solicitar_portas()
    porta_knock = solicitar_porta_knock()

    print(f"Iniciando teste de portas para faixa de IP {faixa_ip}")
    realizar_ping(faixa_ip, portas, porta_knock)

if __name__ == "__main__":
    main()
